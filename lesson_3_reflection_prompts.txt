When would you want to use a remote repository rather than keeping all your work local?
Using a remote repository helps you collaborate with different people by having the repository online where multiple people 
can access at the same time. It adds security since your computer can crash and still access your work. 
You can also work on the same project from different computers.


Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?
You don't want Git to stay automatically up-to-date with the remote repository because you might not necessarily want to see all the changes from the remote in your local. This would probably be the case if multiple people were working on the same branch.


Describe the differences between forks, clones, and branches.  When would you
use one instead of another?
Forks exist only in Github: they are used to copy a repository from another user and contribute to the project without
changing their initial work. This also helps credit them. We fork instead of : cloning then setting up a remote then pushing
the clone to the remote.
Forking then pulling as the remote is already set up.
Branches exists both locally and remotely. They are multiple versions of one repository.



What is the benefit of having a copy of the last known state of the remote
stored locally?
The benefit is having the latest changes done to the remote that you can work with when offline. Having the latest copy means that when making a pull/push request, you will only have to merge the latest changes and not the whole branch which would be a lot of work.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?
Collaborating would be done centrally with a shared drive or cloud service. It would be easier in the sense that you would only be able to modify one file at a time. Without Git/GitHub you would not have the overhead of file management so development could be quick. However without git/github this would be very difficult to track given a set of files that work together because multiple people could change the files at different times. Working with a large number of people on one file also becomes difficult. Finally git/github makes it easier to test changes on a seperate branch or revert to an old version of the file if
need be.



When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?
Udacity: The workflow when making changes in a separate branch is more complicated than working directly in master, especially when you need to stay up-to-date with changes others are making. Rather than simply pulling and pushing, you need to pull changes into your local master branch, merge the local master into your branch (different-oil, in our case), then push your branch to the remote before finally merging your branch into master, either locally or on GitHub.

You would want to have a separate branch when working on large additions that are based on the master branch but sufficiently different so that the master branch can change a little without impacting the separate branch too much. Therefore these separate branches would most always be additions that once merged into master, if accepted, can be then discarded.
Working directly in master makes it easier to stay up to date with the changes that are in master when making small additions. Whether the create a separate branch would then depend on the size of the modifications being made.
