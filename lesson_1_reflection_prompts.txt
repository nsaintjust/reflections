How did viewing a diff between two versions of a file help you see the bug that
was introduced?

The diff output clearly showed the lines that had been changed between the two
versions of the file.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

The entire history of a file could show who worked on a file, go back to
previous versions, give flexibility to try new things without breaking the whole
file.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

Manually choosing to commit makes versioning more synthetic by showing only the
logical. There is also a little more overhead because of the pull and
commits. Automatically saving versions will probably clutter up the version
history making it hard to access.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

Git is more geared towards development where multiple files are used
simultaneously ie.read by the browser and one file can impact the other file.
Google Docs is more geared towards textual work where each file works on it's
own.

How can you use the commands git log and git diff to view the history of files?

git log will show all the commit history. git diff will show the current changes
in the files that haven't been staged yet. git diff also can compare two commits
to see what has been added/removed in a specific commit.

How might using version control make you more confident to make changes that
could break something?

Version control gives you the ability to retrace your steps to a previously
saved version. Therefore you can create separate branches and work from there.

Now that you have your workspace set up, what do you want to try using Git for?

I'd like to try git for my vba files and then for the future web dev work.
