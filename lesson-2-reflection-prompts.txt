What happens when you initialize a repository? Why do you need to do it?
You run the command git init to create a repository in the directory. However
you will need to run the first commit because git doesn't know what you want
to include in the commit. In addition you wouldn't be able to rename the commit
as you wished if git did it automatically for you.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
Staging area is different from the working directory and repository because it
links the two. It allows you to choose which logical units get pushed to the
repository.

How can you use the staging area to make sure you have one commit per logical
change?
You can use git diff to compare between the working directory and the staging area, as it contains a copy of the latest commit from the repository. Any uncommitted changes will appear in the output of the diff command. Once you've added a file to the staging aread, it will track the changes between the working directory and the staging area.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
Branches helps staying organized by allowing to experiment with new features without touching the previous versions. You can keep the changes or discard them in the future once you've made all the changes. By having several branches, you keep the master branch clean and changed it only if necessary.

How do the diagrams help you visualize the branch structure?
Diagrams help you to visualize by showing all the branches in the log. They show you what branches were created and when. By drawing lines, you can easily see what commits are reachable by a branch and which ones are not.


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
The result of merging two branches together is that the resulting commit contains the common files but also what has been added or deleted by the users. To find out what git keeps, it looks at the parent commit of both branches and removes what has been deleted or adds what has been added since then. When merging you often use the expression "merge the coin branch into the master branch"
We represent the merge in the diagram the way we do because once merged, the commit has two parents and the commits from both branches are searchable from that commit. Thus it is useful to delete a branch once merged since it only deletes the label and keeps the commit.
The commits from both branch are then sorted in chronological order.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
The pros of Git's automatic merging is that it takes care of a lot of changes that don't need to be manually checked each time. It is conservative in the sense that if any of the lines that have been changed from the parent then it will let us know. This takes off a lot of overhead in the merge process.
The disadvantage of Git's automatic merging is that it can't know what the content of the files really indicates too. It just knows that the same sections have been modified therefore it can't judge if we want to keep or discard the changes.
Whenever a merge conflict does happen it is up to us to find out what version we woud like to keep.
