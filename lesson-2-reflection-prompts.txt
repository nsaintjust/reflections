What happens when you initialize a repository? Why do you need to do it?
You run the command git init to create a repository in the directory. However
you will need to run the first commit because git doesn't know what you want
to include in the commit. In addition you wouldn't be able to rename the commit
as you wished if git did it automatically for you.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
Staging area is different from the working directory and repository because it
links the two. It allows you to choose which logical units get pushed to the
repository.

How can you use the staging area to make sure you have one commit per logical
change?
You can use git diff to compare between the working directory and the staging area, as it contains a copy of the latest commit from the repository. Any uncommitted changes will appear in the output of the diff command. Once you've added a file to the staging aread, it will track the changes between the working directory and the staging area.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
Branches helps staying organized by allowing to experiment with new features without touching the previous versions. You can keep the changes or discard them in the future once you've made all the changes. By having several branches, you keep the master branch clean and changed it only if necessary.

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
